/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Decimal, User, PoolExtracted, UserExtracted, TransferParams, QueryConfigResponse, QueryLedgerResponse, QueryPoolsAndUsersResponse, QueryUserResponse } from "./Starbound.types";
export interface StarboundReadOnlyInterface {
    contractAddress: string;
    queryUser: ({ address }: {
        address: string;
    }) => Promise<QueryUserResponse>;
    queryPoolsAndUsers: () => Promise<QueryPoolsAndUsersResponse>;
    queryLedger: () => Promise<QueryLedgerResponse>;
    queryConfig: () => Promise<QueryConfigResponse>;
}
export declare class StarboundQueryClient implements StarboundReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    queryUser: ({ address }: {
        address: string;
    }) => Promise<QueryUserResponse>;
    queryPoolsAndUsers: () => Promise<QueryPoolsAndUsersResponse>;
    queryLedger: () => Promise<QueryLedgerResponse>;
    queryConfig: () => Promise<QueryConfigResponse>;
}
export interface StarboundInterface extends StarboundReadOnlyInterface {
    contractAddress: string;
    sender: string;
    deposit: ({ user }: {
        user: User;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ dappAddressAndDenomList, feeDefault, feeOsmo, scheduler, stablecoinDenom, stablecoinPoolId }: {
        dappAddressAndDenomList?: string[][][];
        feeDefault?: Decimal;
        feeOsmo?: Decimal;
        scheduler?: string;
        stablecoinDenom?: string;
        stablecoinPoolId?: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updatePoolsAndUsers: ({ pools, users }: {
        pools: PoolExtracted[];
        users: UserExtracted[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swap: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    transfer: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    multiTransfer: ({ params }: {
        params: TransferParams[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class StarboundClient extends StarboundQueryClient implements StarboundInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    deposit: ({ user }: {
        user: User;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ dappAddressAndDenomList, feeDefault, feeOsmo, scheduler, stablecoinDenom, stablecoinPoolId }: {
        dappAddressAndDenomList?: string[][][] | undefined;
        feeDefault?: string | undefined;
        feeOsmo?: string | undefined;
        scheduler?: string | undefined;
        stablecoinDenom?: string | undefined;
        stablecoinPoolId?: number | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updatePoolsAndUsers: ({ pools, users }: {
        pools: PoolExtracted[];
        users: UserExtracted[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swap: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    transfer: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    multiTransfer: ({ params }: {
        params: TransferParams[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
