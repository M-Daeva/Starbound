"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarboundMessageComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class StarboundMessageComposer {
    constructor(sender, contractAddress) {
        this.deposit = ({ user }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        deposit: {
                            user
                        }
                    })),
                    funds
                })
            };
        };
        this.withdraw = ({ amount }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        withdraw: {
                            amount
                        }
                    })),
                    funds
                })
            };
        };
        this.updateConfig = ({ dappAddressAndDenomList, feeDefault, feeOsmo, scheduler, stablecoinDenom, stablecoinPoolId }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_config: {
                            dapp_address_and_denom_list: dappAddressAndDenomList,
                            fee_default: feeDefault,
                            fee_osmo: feeOsmo,
                            scheduler,
                            stablecoin_denom: stablecoinDenom,
                            stablecoin_pool_id: stablecoinPoolId
                        }
                    })),
                    funds
                })
            };
        };
        this.updatePoolsAndUsers = ({ pools, users }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_pools_and_users: {
                            pools,
                            users
                        }
                    })),
                    funds
                })
            };
        };
        this.swap = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        swap: {}
                    })),
                    funds
                })
            };
        };
        this.transfer = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        transfer: {}
                    })),
                    funds
                })
            };
        };
        this.multiTransfer = ({ params }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        multi_transfer: {
                            params
                        }
                    })),
                    funds
                })
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.deposit = this.deposit.bind(this);
        this.withdraw = this.withdraw.bind(this);
        this.updateConfig = this.updateConfig.bind(this);
        this.updatePoolsAndUsers = this.updatePoolsAndUsers.bind(this);
        this.swap = this.swap.bind(this);
        this.transfer = this.transfer.bind(this);
        this.multiTransfer = this.multiTransfer.bind(this);
    }
}
exports.StarboundMessageComposer = StarboundMessageComposer;
