/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Decimal, Uint128, QueryMsg, MigrateMsg, Addr, Timestamp, Uint64, Config, AssetInfo, ArrayOfPairInfo, PairInfo, ArrayOfTupleOfAddrAndUser, User, Asset } from "./StarboundNoria.types";
export interface StarboundNoriaMessage {
  contractAddress: string;
  sender: string;
  deposit: ({
    assetList,
    downCounter,
    isRebalancingUsed
  }: {
    assetList?: string[][][];
    downCounter?: Uint128;
    isRebalancingUsed?: boolean;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    feeRate,
    scheduler,
    terraswapFactory
  }: {
    feeRate?: Decimal;
    scheduler?: string;
    terraswapFactory?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class StarboundNoriaMessageComposer implements StarboundNoriaMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.deposit = this.deposit.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  deposit = ({
    assetList,
    downCounter,
    isRebalancingUsed
  }: {
    assetList?: string[][][];
    downCounter?: Uint128;
    isRebalancingUsed?: boolean;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit: {
            asset_list: assetList,
            down_counter: downCounter,
            is_rebalancing_used: isRebalancingUsed
          }
        })),
        funds
      })
    };
  };
  updateConfig = ({
    feeRate,
    scheduler,
    terraswapFactory
  }: {
    feeRate?: Decimal;
    scheduler?: string;
    terraswapFactory?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            fee_rate: feeRate,
            scheduler,
            terraswap_factory: terraswapFactory
          }
        })),
        funds
      })
    };
  };
}