/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {}
export type ExecuteMsg = {
  deposit: {
    user: User;
  };
} | {
  withdraw: {
    amount: Uint128;
  };
} | {
  update_config: {
    dapp_address_and_denom_list?: [string, string][] | null;
    fee_default?: Decimal | null;
    fee_osmo?: Decimal | null;
    scheduler?: string | null;
    stablecoin_denom?: string | null;
    stablecoin_pool_id?: number | null;
  };
} | {
  update_pools_and_users: {
    pools: [string, Pool][];
    users: [string, User][];
  };
} | {
  swap: {};
} | {
  transfer: {};
} | {
  multi_transfer: {
    params: TransferParams[];
  };
};
export type Uint128 = string;
export type Addr = string;
export type Decimal = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export interface User {
  asset_list: Asset[];
  day_counter: Uint128;
  deposited: Uint128;
  is_controlled_rebalancing: boolean;
}
export interface Asset {
  amount_to_send_until_next_epoch: Uint128;
  asset_denom: string;
  wallet_address: Addr;
  wallet_balance: Uint128;
  weight: Decimal;
}
export interface Pool {
  channel_id: string;
  id: Uint128;
  port_id: string;
  price: Decimal;
  symbol: string;
}
export interface TransferParams {
  amount: Uint128;
  block_height: Uint128;
  block_revision: Uint128;
  channel_id: string;
  denom: string;
  timestamp: Timestamp;
  to: string;
}
export type QueryMsg = {
  query_user: {
    address: string;
  };
} | {
  query_pools_and_users: {};
} | {
  query_ledger: {};
} | {
  query_config: {};
};
export type MigrateMsg = string;
export interface Config {
  admin: Addr;
  chain_id_dev: string;
  dapp_address_and_denom_list: [Addr, string][];
  fee_default: Decimal;
  fee_osmo: Decimal;
  scheduler: Addr;
  stablecoin_denom: string;
  stablecoin_pool_id: number;
  timestamp: Timestamp;
}
export interface Ledger {
  global_delta_balance_list: Uint128[];
  global_delta_cost_list: Uint128[];
  global_denom_list: string[];
  global_price_list: Decimal[];
}
export interface QueryPoolsAndUsersResponse {
  pools: [string, Pool][];
  users: [Addr, User][];
}