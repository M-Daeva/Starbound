/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Decimal, Uint128, QueryMsg, MigrateMsg, Addr, Timestamp, Uint64, Config, User, Asset } from "./StarboundNoria.types";
export interface StarboundNoriaReadOnlyInterface {
  contractAddress: string;
  queryUsers: ({
    addressList
  }: {
    addressList: string[];
  }) => Promise<User>;
  queryConfig: () => Promise<Config>;
}
export class StarboundNoriaQueryClient implements StarboundNoriaReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryUsers = this.queryUsers.bind(this);
    this.queryConfig = this.queryConfig.bind(this);
  }

  queryUsers = async ({
    addressList
  }: {
    addressList: string[];
  }): Promise<User> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_users: {
        address_list: addressList
      }
    });
  };
  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
}
export interface StarboundNoriaInterface extends StarboundNoriaReadOnlyInterface {
  contractAddress: string;
  sender: string;
  deposit: ({
    assetList,
    downCounter,
    isRebalancingUsed
  }: {
    assetList?: string[][][];
    downCounter?: Uint128;
    isRebalancingUsed?: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StarboundNoriaClient extends StarboundNoriaQueryClient implements StarboundNoriaInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.deposit = this.deposit.bind(this);
  }

  deposit = async ({
    assetList,
    downCounter,
    isRebalancingUsed
  }: {
    assetList?: string[][][];
    downCounter?: Uint128;
    isRebalancingUsed?: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {
        asset_list: assetList,
        down_counter: downCounter,
        is_rebalancing_used: isRebalancingUsed
      }
    }, fee, memo, funds);
  };
}